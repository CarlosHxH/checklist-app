generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id             String       @id @default(cuid())
  username       String       @unique(map: "User_username_key")
  email          String?      @unique(map: "User_email_key")
  email_verified DateTime?
  password       String
  name           String
  role           String       @default("DRIVER")
  image          String?
  isActive       Boolean?     @default(true)
  lastLogin      DateTime?
  loginCount     Int?         @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?
  access         access[]
  accounts       Account[]
  inspection     inspection[]
  sessions       Session[]
  vehiclekey     VehicleKey[]

  Inspect Inspect[] @relation(map: "Access_userId_fkey")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model access {
  id        String   @id @default(cuid())
  userId    String
  page      String
  ipAddress String
  userAgent String
  timestamp DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], map: "Access_userId_fkey")

  @@index([userId], map: "Access_userId_fkey")
}



model Inspect {
  id            String  @id @default(cuid())
  userId        String
  startId       String?
  endId         String?
  vehicleId     String?
  start         inspection? @relation("StartInspection", fields: [startId], references: [id])
  end           inspection? @relation("EndInspection", fields: [endId], references: [id])
  vehicle       vehicle? @relation("EndInspection", fields: [vehicleId], references: [id])
  user          user     @relation(fields: [userId], references: [id], map: "Inspect_userId_fkey")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model InspectionPhoto {
  id            String     @id @default(cuid())
  inspectionId  String
  description   String?
  photo         String     @db.LongText
  createdAt     DateTime   @default(now())
  inspection    inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  @@index([inspectionId])
}

model inspection {
  id                          String            @id @default(cuid())
  userId                      String
  vehicleId                   String
  vehicleKey                  String?
  dataInspecao                DateTime?         @default(now())
  status                      String?
  crlvEmDia                   String?
  certificadoTacografoEmDia   String?
  nivelAgua                   String?
  nivelOleo                   String?
  eixo                        String?
  dianteira                   String?
  descricaoDianteira          String?
  tracao                      String?
  descricaoTracao             String?
  truck                       String?
  descricaoTruck              String?
  quartoEixo                  String?
  descricaoQuartoEixo         String?
  avariasCabine               String?
  descricaoAvariasCabine      String?
  bauPossuiAvarias            String?
  descricaoAvariasBau         String?
  funcionamentoParteEletrica  String?
  descricaoParteEletrica      String?
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime?
  kilometer                   String?
  isFinished                  Boolean?          @default(false)
  
  extintor                    String?
  fotoExtintor                String?           @db.LongText

  fotoDocumento               String?           @db.LongText
  fotoTacografo               String?           @db.LongText

  fotoAvarias1                String?           @db.LongText
  fotoAvarias2                String?           @db.LongText
  fotoAvarias3                String?           @db.LongText
  fotoAvarias4                String?           @db.LongText
  
  photos                      InspectionPhoto[]
  user                        user              @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Inspection_userId_fkey")
  vehicle                     vehicle           @relation(fields: [vehicleId], references: [id], onDelete: Cascade, map: "Inspection_vehicleId_fkey")
  startInspection             Inspect[]         @relation("StartInspection")
  endInspection               Inspect[]         @relation("EndInspection")

  @@index([userId],           map: "Inspection_userId_fkey")
  @@index([vehicleId],        map: "Inspection_vehicleId_fkey")
}

model vehicle {
  id              String       @id @default(cuid())
  make            String?
  model           String?
  year            String?
  eixo            String?
  plate           String       @unique(map: "Vehicle_plate_key")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime?
  fixo            Boolean      @default(false)
  cidadeBase      String?
  tacografo       Boolean      @default(false)
  inspection      inspection[]
  vehiclekey      VehicleKey[]
  endInspection   Inspect[]    @relation("EndInspection")
}

model VehicleKey {
  id              String       @id @default(uuid())
  userId          String
  vehicleId       String
  parentId        String?
  status          String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            user         @relation(fields: [userId], references: [id])
  vehicle         vehicle      @relation(fields: [vehicleId], references: [id])
  parent          VehicleKey?  @relation("KeyHistory", fields: [parentId], references: [id])
  children        VehicleKey[] @relation("KeyHistory")
}
